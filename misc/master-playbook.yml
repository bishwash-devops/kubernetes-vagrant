---
- hosts: all
  become: yes
  vars:
    kube_dir: /opt
    MASTER_IP: 192.168.56.10
    MASTER_CLUSTER_IP: 192.168.56.1
    pki_dir: "{{kube_dir}}/kubernetes/pki"
  tasks:
  # Network Configurations
  - block:
    - name: "Set ip forwarding on in /proc and in the sysctl file and reload if necessary"
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        sysctl_set: yes
        state: present
        reload: yes

    - name: "Enable Firewall, Allow SSH"
      ufw:
        rule: allow
        port: 22
        state: enabled

    - name: "Firewall Update, Allow TCP Ports."
      ufw:
        rule: allow
        port: 80
        proto: tcp
        state: enabled
      with_items:
        - 80
        - 443
    tags: network_config

  - block:
    # This task disables swap for Kubernetes node (see https://github.com/kubernetes/kubernetes/pull/31996)
    - name: Remove swapfile from /etc/fstab
      mount:
        name: swap
        fstype: swap
        state: absent
    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0
    tags: swapoff

  # Install Kubernetes Binaries
  - block:
    - name: "Download kubernetes.tar.gz"
      unarchive:
        src: "https://github.com/kubernetes/kubernetes/releases/download/v1.10.8/kubernetes.tar.gz"
        dest: "{{kube_dir}}/"
        remote_src: yes
        creates: "{{kube_dir}}/kubernetes/cluster/get-kube-binaries.sh"

    - name: "Run get-kube-binaries.sh"
      shell: "echo 'y' | {{kube_dir}}/kubernetes/cluster/get-kube-binaries.sh"

    # - name: "Add '/opt/kubernetes/client/bin' to your PATH"
    #   copy:
    #     dest: /etc/profile.d/kubernetes-path.sh
    #     content: 'PATH=$PATH:/opt/kubernetes/client/bin'

    - name: "Unarchive Server Binaries"
      unarchive: 
        src: "{{kube_dir}}/kubernetes/server/kubernetes-server-linux-amd64.tar.gz"
        dest: "{{kube_dir}}/"
        remote_src: yes
        creates: "{{kube_dir}}/kubernetes/server/bin"

    - name: "Add '/opt/kubernetes/server/bin' to your PATH"
      copy:
        dest: /etc/profile.d/kubernetes-path.sh
        content: 'PATH=$PATH:/opt/kubernetes/server/bin'

    # Print Kubectl Version
    - command: "/opt/kubernetes/server/bin/kubectl version"
      register: kubectl_version
      ignore_errors: yes
      no_log: True
    - debug: msg="{{kubectl_version.stdout}}"

    tags: kube_binaries


  # Install Docker-CE
  - block:

    - name: Install Docker and role dependencies
      apt:
        name: "{{ item }}"
        state: present
        update_cache: True
      with_items:
        - "apt-transport-https"
        - "ca-certificates"
        - "software-properties-common"
      tags: apt

    - name: Add Dockerâ€™s official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Configure upstream APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
        state: present
        update_cache: True

    - name: Install Docker
      apt:
        name: "docker-ce"
        state: present

    - name: adding user 'vagrant' to group docker
      user:
        name: 'vagrant'
        groups: docker
        append: yes

    tags: docker_ce

  # Generate Certificates
  - block:

    # Check if ca.crt is already created
    - stat: 
        path: "{{pki_dir}}/ca.crt"
      register: ca_cert
  
    - debug:
        msg: "Certificate already exists."
      when: ca_cert.stat.exists == True

    # Generate Certificates if ca_cert does not exist
    - block:
      - name: Download easyrsa
        unarchive:
          src: https://storage.googleapis.com/kubernetes-release/easy-rsa/easy-rsa.tar.gz
          dest: "{{kube_dir}}"
          remote_src: yes

      - set_fact:
          rsa_dir: "{{kube_dir}}/easy-rsa-master/easyrsa3"
      
      - name: "Remove existing pki directory"
        file:
          path: "{{rsa_dir}}/pki"
          state: absent

      - name: init-pki
        shell: ./easyrsa init-pki 
        args:
          chdir: "{{rsa_dir}}"

      - name: Generate a CA
        shell: ./easyrsa --batch "--req-cn={{MASTER_IP}}@`date +%s`" build-ca nopass
        args:
          chdir: "{{rsa_dir}}"

      - name: Generate server certificate and key
        shell: ./easyrsa --subject-alt-name="IP:{{MASTER_IP}},"\
          "IP:{{MASTER_CLUSTER_IP}},"\
          "DNS:kubernetes,"\
          "DNS:kubernetes.default,"\
          "DNS:kubernetes.default.svc,"\
          "DNS:kubernetes.default.svc.cluster,"\
          "DNS:kubernetes.default.svc.cluster.local" \
          --days=10000 \
          build-server-full server nopass
        args:
          chdir: "{{rsa_dir}}"

      - name: Create directory for pki certs
        file:
          path: "{{pki_dir}}"
          state: directory

      - name: "Copy certs to pki directory {{pki_dir}}"
        copy:
          src: "{{item}}"
          dest: "{{pki_dir}}/"
          remote_src: yes
        with_items:
          - "{{rsa_dir}}/pki/ca.crt"
          - "{{rsa_dir}}/pki/issued/server.crt"
          - "{{rsa_dir}}/pki/private/server.key"

      when: ca_cert.stat.exists == False
    tags: certs   
